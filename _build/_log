### Starting build.
# Target: main.ml.depends, tags: { extension:ml, file:main.ml, ocaml, ocamldep, quiet }
''ocamldep.opt -modules main.ml > main.ml.depends
# Target: ast.ml.depends, tags: { extension:ml, file:ast.ml, ocaml, ocamldep, quiet }
''ocamldep.opt -modules ast.ml > ast.ml.depends
# Target: env.ml.depends, tags: { extension:ml, file:env.ml, ocaml, ocamldep, quiet }
''ocamldep.opt -modules env.ml > env.ml.depends
# Target: env.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:env.cmo, file:env.ml, implem, ocaml, quiet }
''ocamlc.opt -c -o env.cmo env.ml
# Target: grammar.mly, tags: { extension:mly, file:grammar.mly, infer, ocaml, ocamlyacc, parser, quiet }
''ocamlyacc grammar.mly
# Target: grammar.mli.depends, tags: { extension:mli, file:grammar.mli, ocaml, ocamldep, quiet }
''ocamldep.opt -modules grammar.mli > grammar.mli.depends
# Target: ast.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:ast.cmo, file:ast.ml, implem, ocaml, quiet }
''ocamlc.opt -c -o ast.cmo ast.ml
# Target: lexer.mll, tags: { extension:mll, file:lexer.mll, lexer, ocaml, ocamllex, quiet }
''ocamllex.opt -q lexer.mll
# Target: lexer.ml.depends, tags: { extension:ml, file:lexer.ml, ocaml, ocamldep, quiet }
''ocamldep.opt -modules lexer.ml > lexer.ml.depends
# Target: grammar.cmi, tags: { byte, compile, extension:mli, file:grammar.mli, interf, ocaml, quiet }
''ocamlc.opt -c -o grammar.cmi grammar.mli
# Target: lexer.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:lexer.cmo, file:lexer.ml, implem, ocaml, quiet }
''ocamlc.opt -c -o lexer.cmo lexer.ml
# Target: main.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:main.cmo, file:main.ml, implem, ocaml, quiet }
''ocamlc.opt -c -o main.cmo main.ml
# Target: env.cmx, tags: { compile, extension:cmx, extension:ml, file:env.cmx, file:env.ml, implem, native, ocaml, quiet }
''ocamlopt.opt -c -o env.cmx env.ml
# Compilation unsuccessful.
